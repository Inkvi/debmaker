#!/usr/bin/env python
# -*- coding: utf-8 -*-
from itertools import chain

import argparse
from datetime import time, datetime
from glob import glob
import os
from posix import W_OK
import sys
import debmaker

parser = argparse.ArgumentParser(description='Generating debian files')
parser.add_argument('--project', required=True, help='Project name')
parser.add_argument('--version', required=True, help='Project version')
parser.add_argument('--hash', help="First 8 letters of commit hash")
parser.add_argument('--name', required=True, help='Maintainer name')
parser.add_argument('--email', required=True, help='Maintainer email')
parser.add_argument('--repopath',
                    help="""Repository subpath.
                    For git://github.com/inkvi/debmaker.git subpath is inkvi/debmaker""")
parser.add_argument('--o', default=os.getcwdu(),
                    help='Output directory. Default is cwd')
parser.add_argument('--type', default='git', choices=['git', 'pypi'])

args = parser.parse_args()

now = datetime.now()

project = args.project
vars = {
    'project': args.project,
    'pypiproject': args.project[7:] if args.project.startswith('python-')
    else project,
    'version': args.version,
    'hash': args.hash,
    'name': args.name,
    'email': args.email,
    'date': now.strftime('%Y%m%d'),
    'isodate': now.strftime('%a, %d %b %Y %H:%M:%S +0400'),
    'repopath': args.repopath
}
output_dir = args.o
if not os.access(output_dir, W_OK):
    print 'Not enough permission to write in %s' % os.path.abspath(output_dir)
    sys.exit(1)

output_dir = args.o + '/debian/'

if not os.path.exists(output_dir):
    os.mkdir(output_dir)

templates_dir = os.path.abspath(
    os.path.dirname(debmaker.__file__)) + '/templates/'

if not os.path.exists(templates_dir):
    print 'Cannot find folder with templates %s' % templates_dir
    sys.exit(1)

templates = chain(glob(templates_dir + '/*'),
                  glob(templates_dir + args.type + '/*'))

for template_filepath in templates:
    if os.path.isdir(template_filepath):
        continue
    with open(template_filepath) as f:
        template_string = f.read()
        rendered = template_string % vars

        output_filepath = output_dir + os.path.basename(
            template_filepath)

        with open(output_filepath, 'w') as wf:
            print 'Writing to %s' % output_filepath
            wf.write(rendered)

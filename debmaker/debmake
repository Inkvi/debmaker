#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from datetime import time, datetime
from glob import glob
import os
from posix import W_OK
import sys

parser = argparse.ArgumentParser(description='Generating debian files')
parser.add_argument('--project', required=True)
parser.add_argument('--version', required=True)
parser.add_argument('--hash')
parser.add_argument('--name', required=True)
parser.add_argument('--email', required=True)
parser.add_argument('--repopath')
parser.add_argument('--o', default=os.getcwdu())
parser.add_argument('--type', default='git', choices=['git', 'pypi'])

args = parser.parse_args()

templates_dir = os.path.abspath(
    os.path.dirname(__file__)) + '/templates/' + args.type

now = datetime.now()

vars = {
    'project': args.project,
    'version': args.version,
    'hash': args.hash,
    'name': args.name,
    'email': args.email,
    'date': now.strftime('%Y%m%d'),
    'isodate': now.strftime('%a, %d %b %Y %H:%M:%S +0400'),
    'repopath': args.repopath
}
output_dir = args.o
if not os.access(output_dir, W_OK):
    print 'Not enough permission to write in %s' % os.path.abspath(output_dir)
    sys.exit(1)

output_dir = args.o + '/debian/'

if not os.path.exists(output_dir):
    os.mkdir(output_dir)

for template_filepath in glob(templates_dir + '/*'):
    with open(template_filepath) as f:
        template_string = f.read()
        rendered = template_string % vars

        output_filepath = output_dir + os.path.basename(
            template_filepath)

        with open(output_filepath, 'w') as wf:
            print 'Writing to %s' % output_filepath
            wf.write(rendered)
